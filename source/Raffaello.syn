module Rafaello {
    
    // ***** BarChart ********************

    method string BarChart(int32 svgWidth, int32 svgHeight, json dataset, json options) {
        string component
        json attr
        int32 points
        int32 i 
        int32 max
        int32 renderHeight = svgHeight - 10

        // initialize default values

        if not options.HasKey("x") { options["x"] = 0 }
        if not options.HasKey("width") { options["width"] = svgWidth - options["x"] }

        // determine maximum height

        points = count(dataset["data"])

        max = dataset["data"][0]
        i = 1
        while i < points {
            if dataset["data"][i] > max {
               max = dataset["data"][i]
            }
            i = i + 1
        }

        // configure styling attributes

        attr = ParseJSON("{}")
        attr["width"] = (options["width"] - (points - 1) * 5) \ points
        attr["fill"] = "#00cc00"
        attr["fill-opacity"] = 0.75
        attr["stroke"] = "#004000"
        attr["stroke-opacity"] = 0.75
        attr["stroke-width"] = 1

        // create bars

        i = 0
        while i < points {
            attr["x"] = options["x"] + attr["width"] * i + (5 * i) + 0.5
            attr["height"] = Round( renderHeight * (dataset["data"][i] / max), 0 )
            attr["y"] = 10 + renderHeight - attr["height"] + 0.5
            component = component + BuildElement("rect", attr, "")
            i = i + 1
        }

        return component
    }

    // ***** CandlestickChart ********************

    method string CandlestickChart(int32 svgWidth, int32 svgHeight, json datasets, json options) {
        string component
        json attr
        json lineAttr
        int32 points
        int32 i 
        int32 max
        int32 min
        int32 renderHeight = svgHeight - 10

        // initialize default values

        if not options.HasKey("x") { options["x"] = 0 }
        if not options.HasKey("width") { options["width"] = svgWidth - options["x"] }

        // determine maximum height

        points = count(datasets[0]["data"]) 

        max = datasets[0]["data"][0]
        min = datasets[0]["data"][0]
        i = 0
        while i < points {
            if datasets[0]["data"][i] > max {
               max = datasets[0]["data"][i]
            }
            if datasets[1]["data"][i] > max {
               max = datasets[1]["data"][i]
            }
            if datasets[2]["data"][i] > max {
               max = datasets[2]["data"][i]
            }
            if datasets[3]["data"][i] > max {
               max = datasets[3]["data"][i]
            }                                    
            if datasets[0]["data"][i] < min {
               min = datasets[0]["data"][i]
            } 
            if datasets[1]["data"][i] < min {
               min = datasets[1]["data"][i]
            } 
            if datasets[2]["data"][i] < min {
               min = datasets[2]["data"][i]
            } 
            if datasets[3]["data"][i] < min {
               min = datasets[3]["data"][i]
            }           
            echo(i)                          
            i = i + 1
        }

        // configure styling attributes

        attr = ParseJSON("{}")
        attr["width"] = (options["width"] - (points - 1) * 5) \ points
        attr["fill"] = "#00cc00"
        attr["fill-opacity"] = 0.75
        attr["stroke"] = "#004000"
        attr["stroke-opacity"] = 0.75
        attr["stroke-width"] = 1

        lineAttr = ParseJSON("{}")        
        lineAttr["stroke"] = "#000000"
        lineAttr["stroke-width"] = 1

        // create bars

        i = 0
        while i < points {
            attr["x"] = options["x"] + attr["width"] * i + (5 * i) + 0.5

            // lines
            
            lineAttr["x1"] = attr["x"] + attr["width"] \ 2
            lineAttr["x2"] = lineAttr["x1"]

            // body

            if (datasets[0]["data"][i] < datasets[3]["data"][i]) {
                attr["y"] = 10 + renderHeight - Round( renderHeight * ((datasets[3]["data"][i] - min) / (max - min)), 0 ) + 0.5
                attr["height"] = renderHeight * (datasets[3]["data"][i] - datasets[0]["data"][i]) / (max - min)
                attr["fill"] = "#00cc00"
                attr["stroke"] = "#004000"         
            } else {
                attr["y"] = 10 + renderHeight - Round( renderHeight * ((datasets[0]["data"][i] - min) / (max - min)), 0 ) + 0.5
                attr["height"] = renderHeight * (datasets[0]["data"][i] - datasets[3]["data"][i]) / (max - min)     
                attr["fill"] = "#cc0000"
                attr["stroke"] = "#400000"    
            }

            lineAttr["y1"] = 10 + renderHeight - Round( renderHeight * ((datasets[1]["data"][i] - min) / (max - min)), 0 ) + 0.5   
            lineAttr["y2"] = attr["y"]
            component = component + BuildElement("line", lineAttr, "") 
            
            lineAttr["y1"] = attr["y"] + attr["height"]
            lineAttr["y2"] = 10 + renderHeight - Round( renderHeight * ((datasets[2]["data"][i] - min) / (max - min)), 0 ) + 0.5   
            component = component + BuildElement("line", lineAttr, "")                 

            component = component + BuildElement("rect", attr, "")            
            

            i = i + 1
        }

        return component
    }

   // ***** LineChart ********************

    method string LineChart(int32 svgWidth, int32 svgHeight, json dataset, json options) {
        string component
        json attr
        int32 points
        int32 i 
        int32 max
        string path
        int32 pointWidth
        int32 tmpHeight
        int32 renderHeight = svgHeight - 10

        // initialize default values

        if not options.HasKey("x") { options["x"] = 0 }
        if not options.HasKey("width") { options["width"] = svgWidth - options["x"] }

        // determine maximum height

        points = count(dataset["data"])

        max = dataset["data"][0]
        i = 1
        while i < points {
            if dataset["data"][i] > max {
               max = dataset["data"][i]
            }
            i = i + 1
        }

        // configure styling attributes

        pointWidth = (options["width"] - (points - 1) * 5) \ points

        attr = ParseJSON("{}")        
        attr["stroke"] = "#004000"
        attr["stroke-opacity"] = 0.75
        attr["stroke-width"] = 1
        attr["fill"] = "none"

        // create lines

        path = "M"
        i = 0
        while i < points {       
            path = path + Str(options["x"] + pointWidth * i + pointWidth * 0.5 + (5 * i) + 0.5)
            tmpHeight = Round( renderHeight * (dataset["data"][i] / max), 0 )
            path = path + " " + Str(10 + renderHeight - tmpHeight + 0.5)
            i = i + 1
            if i < points {
                path = path + " "
            }
        }

        attr["d"] = path

        component = BuildElement("path", attr, "")

        return component
    }

    // ***** Scale ********************

    method string Scale(int32 svgWidth, int32 svgHeight, json dataset, json options) {
        string component
        json lineAttr
        json textAttr
        int32 scaleItems[]
        int32 i 
        int32 min
        int32 max
        int32 points
        int32 y
        int32 step
        string tmpStr
        int32 scaleWidth 
        int32 renderHeight = svgHeight - 10

        // initialize default values

        if not options.HasKey("x") { options["x"] = 0 }
        if not options.HasKey("align") { options["align"] = "left" }
        if not options.HasKey("min") { options["min"] = 0 }

        // determine min and max

        points = count(dataset["data"])

        min = options["min"]
        max = dataset["data"][0]
        i = 1
        while i < points {
            if dataset["data"][i] > max {
               max = dataset["data"][i]
            }
            i = i + 1
        }

        // determine scale items

        step = (max - min) \ 5
        scaleItems.Append(max)
        i = max - step
        while i >= min {
            scaleItems.Append(i)
            i = i - step
        }

        tmpStr = Str(max)
        scaleWidth = Count(tmpStr) * 7

        lineAttr = ParseJSON("{}")
        lineAttr["y1"] = 10
        lineAttr["y2"] = svgHeight + 1
        lineAttr["stroke"] = "#000000"
        lineAttr["stroke-width"] = 1

        if options["align"] = "right" {

            // draw vertical line

            lineAttr["x1"] = options["x"] + 0.5
            lineAttr["x2"] = options["x"] + 0.5

            component = component + BuildElement("line", lineAttr, "")

            // draw scale items

            textAttr = ParseJSON("{}")
            textAttr["fill"] = "#000000"  
            textAttr["x"] = options["x"] + 9
            lineAttr["x1"] = options["x"] 
            lineAttr["x2"] = options["x"] + 5
            i = 0
            while i < Count(scaleItems) {
                y = 10 + Round(renderHeight - ((scaleItems[i] - min) / (max - min)) * renderHeight, 0)
                
                lineAttr["y1"] = y + 0.5
                lineAttr["y2"] = y + 0.5
                component = component + BuildElement("line", lineAttr, "")
            
                textAttr["y"] = y
                component = component + BuildElement("text", textAttr, Str(scaleItems[i]))

                i = i + 1
            }            

        } else {

            // draw vertical line

            lineAttr["x1"] = options["x"] + scaleWidth + 10.5 
            lineAttr["x2"] = options["x"] + scaleWidth + 10.5
            component = component + BuildElement("line", lineAttr, "")

            // draw scale items

            textAttr = ParseJSON("{}")
            textAttr["fill"] = "#000000"  
            textAttr["x"] = options["x"] 
            lineAttr["x1"] = options["x"] + scaleWidth + 5
            lineAttr["x2"] = options["x"] + scaleWidth + 10
            i = 0
            while i < Count(scaleItems) {
                y = 10 + Round(renderHeight - ((scaleItems[i] - min) / (max - min)) * renderHeight, 0)                
                lineAttr["y1"] = y + 0.5                
                lineAttr["y2"] = y + 0.5
                component = component + BuildElement("line", lineAttr, "")
            
                textAttr["y"] = y
                component = component + BuildElement("text", textAttr, Str(scaleItems[i]))

                i = i + 1
            }

        }

        return component
    }

    // ===========================================================================
    //   HELPER METHODS
    // ===========================================================================

    // ***** BuildElement ********************

    method string BuildElement(string name, json attributes, string content) {
        string element
        int32 i

        element = "<" + name
        i = 0
        while i < Count(attributes) {
            element = element + " " + attributes.KeyName(i) + "=\"" + attributes[attributes.KeyName(i)] + "\""
            i = i + 1
        }
        if content <> "" {
            element = element + ">" + content + "</" + name + ">"
        } else {
            element = element + " />"
        }
       

        return element
    }

    // ***** Render ********************

    method string Render(int32 svgWidth, int32 svgHeight, json object) {
        string composition
        json dataset
        json options
        int32 i
        int32 componentCount
        json component
        int32 datasetIndex

        composition = "<svg "
        composition = composition + " width=\"" + svgWidth + "\""
        composition = composition + " height=\"" + svgHeight + "\""
        composition = composition + " xmlns=\"http://www.w3.org/2000/svg\">"

        componentCount = Count(object["components"])
        i = 0
        while i < componentCount {

            component = object["components"][i]

            // get dataset

            if component.HasKey("dataset") {
                datasetIndex = component["dataset"]
            } else {
                datasetIndex = 0   
            } 
            dataset = object["datasets"][datasetIndex]

            options = ParseJSON("{}")
            if component.HasKey("options") {
                options = component["options"]
            }

            // render component with selected dataset

            switch component["type"] {
                case "candlestick" {                                       
                    composition = composition + CandlestickChart(svgWidth - 1, svgHeight - 1, object["datasets"], options)
                }                
                case "bar" {                                       
                    composition = composition + BarChart(svgWidth - 1, svgHeight - 1, dataset, options)
                }
                case "line" {                                       
                    composition = composition + LineChart(svgWidth - 1, svgHeight - 1, dataset, options)
                }                
                case "scale" {
                    composition = composition + Scale(svgWidth - 1, svgHeight - 1, dataset, options)
                }
            }

            i = i + 1
        }

        composition = composition + "</svg>"

        return composition 
    }

}