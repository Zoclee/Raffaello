module Rafaello {
    
    // ***** BarChart ********************

    method string BarChart(int32 width, int32 height, json chartData) {
        string chart
        json attr = ParseJSON("{}")
        int32 points
        int32 i 
        int32 max

        chart = "<svg "
        chart = chart + " width=\"" + width + "\""
        chart = chart + " height=\"" + height + "\""
        chart = chart + " xmlns=\"http://www.w3.org/2000/svg\">"        
        
        points = count(chartData["datasets"][0]["data"])

        // configure styling attributes

        attr["width"] = (width - ((points - 1) * 3)) \ points
        attr["fill"] = "#cc0000"
        attr["stroke"] = "#00cc00"
        attr["stroke-width"] = 1
        
        // determine maximum height

        max = chartData["datasets"][0]["data"][0]
        i = 1
        while i < points {
            if chartData["datasets"][0]["data"][i] > max {
               max =  chartData["datasets"][0]["data"][i]
            }
            i = i + 1
        }

        // create bars

        i = 0
        while i < points {
            attr["x"] = attr["width"] * i + (3 * i)
            attr["height"] = Round( height * (chartData["datasets"][0]["data"][i] / max), 0 )
            attr["y"] = height - attr["height"]
            chart = chart + rafBuildElement("rect", attr)
            i = i + 1
        }

        chart = chart + "</svg>"

        return chart
    }

    // ***** rafBuildElement ********************

    method string rafBuildElement(string name, json attributes) {
        string element
        int32 i

        element = "<" + name
        i = 0
        while i < Count(attributes) {
            element = element + " " + attributes.KeyName(i) + "=\"" + attributes[attributes.KeyName(i)] + "\""
            i = i + 1
        }
        element = element + " />"

        return element
    }

}