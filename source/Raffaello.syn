module Rafaello {
    
    // ***** BarGraph ********************

    method string BarGraph(int32 svgWidth, int32 svgHeight, json dataset, json options) {
        string component
        json attr
        int32 points
        int32 i 
        int32 max

        // initialize default values

        if not options.HasKey("x") { options["x"] = 0 }
        if not options.HasKey("width") { options["width"] = svgWidth - options["x"] }

        // determine maximum height

        points = count(dataset["data"])

        max = dataset["data"][0]
        i = 1
        while i < points {
            if dataset["data"][i] > max {
               max = dataset["data"][i]
            }
            i = i + 1
        }

        // configure styling attributes

        attr = ParseJSON("{}")
        attr["width"] = (options["width"] - (points - 1) * 5) \ points
        attr["fill"] = "#00cc00"
        attr["fill-opacity"] = 0.75
        attr["stroke"] = "#004000"
        attr["stroke-opacity"] = 0.75
        attr["stroke-width"] = 1

        // create bars

        i = 0
        while i < points {
            attr["x"] = options["x"] + attr["width"] * i + (5 * i)
            attr["height"] = Round( svgHeight * (dataset["data"][i] / max), 0 )
            attr["y"] = svgHeight - attr["height"]
            component = component + BuildElement("rect", attr, "")
            i = i + 1
        }

        return component
    }

    // ***** CandlestickGraph ********************

    method string CandlestickGraph(int32 svgWidth, int32 svgHeight, json datasets, json options) {
        string component
        json attr
        json lineAttr
        int32 points
        int32 i 
        int32 max
        int32 min

        // initialize default values

        if not options.HasKey("x") { options["x"] = 0 }
        if not options.HasKey("width") { options["width"] = svgWidth - options["x"] }

        // determine maximum height

        points = count(datasets[0]["data"]) 

        max = datasets[0]["data"][0]
        min = datasets[0]["data"][0]
        i = 0
        while i < points {
            if datasets[0]["data"][i] > max {
               max = datasets[0]["data"][i]
            }
            if datasets[1]["data"][i] > max {
               max = datasets[1]["data"][i]
            }
            if datasets[2]["data"][i] > max {
               max = datasets[2]["data"][i]
            }
            if datasets[3]["data"][i] > max {
               max = datasets[3]["data"][i]
            }                                    
            if datasets[0]["data"][i] < min {
               min = datasets[0]["data"][i]
            } 
            if datasets[1]["data"][i] < min {
               min = datasets[1]["data"][i]
            } 
            if datasets[2]["data"][i] < min {
               min = datasets[2]["data"][i]
            } 
            if datasets[3]["data"][i] < min {
               min = datasets[3]["data"][i]
            }                                
            i = i + 1
        }

        // configure styling attributes

        attr = ParseJSON("{}")
        attr["width"] = (options["width"] - (points - 1) * 5) \ points
        attr["fill"] = "#00cc00"
        attr["fill-opacity"] = 0.75
        attr["stroke"] = "#004000"
        attr["stroke-opacity"] = 0.75
        attr["stroke-width"] = 1

        lineAttr = ParseJSON("{}")        
        lineAttr["stroke"] = "#000000"
        lineAttr["stroke-width"] = 1

        // create bars

        i = 0
        while i < points {
            attr["x"] = options["x"] + attr["width"] * i + (5 * i) + 0.5

            // lines
            
            lineAttr["x1"] = attr["x"] + attr["width"] \ 2
            lineAttr["x2"] = lineAttr["x1"]

            // body

            if (datasets[0]["data"][i] < datasets[3]["data"][i]) {
                attr["y"] = svgHeight - Round( svgHeight * ((datasets[3]["data"][i] - min) / (max - min)), 0 )
                attr["height"] = svgHeight * (datasets[3]["data"][i] - datasets[0]["data"][i]) / (max - min)
                attr["fill"] = "#00cc00"
                attr["stroke"] = "#004000"         
            } else {
                attr["y"] = svgHeight - Round( svgHeight * ((datasets[0]["data"][i] - min) / (max - min)), 0 )
                attr["height"] = svgHeight * (datasets[0]["data"][i] - datasets[3]["data"][i]) / (max - min)     
                attr["fill"] = "#cc0000"
                attr["stroke"] = "#400000"    
            }

            lineAttr["y1"] = svgHeight - Round( svgHeight * ((datasets[1]["data"][i] - min) / (max - min)), 0 ) 
            lineAttr["y2"] = attr["y"]
            component = component + BuildElement("line", lineAttr, "") 
            
            lineAttr["y1"] = attr["y"] + attr["height"]
            lineAttr["y2"] = svgHeight - Round( svgHeight * ((datasets[2]["data"][i] - min) / (max - min)), 0 )  
            component = component + BuildElement("line", lineAttr, "")                 

            component = component + BuildElement("rect", attr, "")            
            

            i = i + 1
        }

        return component
    }

    // ***** HeatMap ********************

    method string HeatMap(int32 svgWidth, int32 svgHeight, json dataset, json options) {
        string component
        json attr
        int32 points
        int32 i 
        int32 max
        int32 min
        double value

        // initialize default values

        if not options.HasKey("x") { options["x"] = 0 }
        if not options.HasKey("width") { options["width"] = svgWidth - options["x"] }

        // determine maximum height

        points = count(dataset["data"])

        max = 100
        min = 0
        /*max = dataset["data"][0]
        min = dataset["data"][0]
        i = 1
        while i < points {
            if dataset["data"][i] > max {
               max = dataset["data"][i]
            }
            if dataset["data"][i] < min {
               min = dataset["data"][i]
            }            
            i = i + 1
        }*/

        // configure styling attributes

        attr = ParseJSON("{}")
        attr["width"] = options["width"] \ points
        attr["height"] = svgHeight        
        attr["stroke-width"] = 1        
        attr["y"] = 0

        // create bars

        i = 0
        while i < points {
            attr["x"] = options["x"] + attr["width"] * i
            value = (dataset["data"][i] - min) / (max - min)
            if value >= 0.75 {
                attr["fill"] = "#00aa00"
                attr["stroke"] = "#00aa00"
            } elseif value >= 0.25 {
                attr["fill"] = "#aaaa00"    
                attr["stroke"] = "#aaaa00"            
            } else {
                attr["fill"] = "#aa0000"
                attr["stroke"] = "#aa0000"
            }
            component = component + BuildElement("rect", attr, "")
            i = i + 1
        }

        return component
    }

   // ***** LineGraph ********************

    method string LineGraph(int32 svgWidth, int32 svgHeight, json dataset, json options) {
        string component
        json attr
        int32 points
        int32 i 
        int32 max
        string path
        int32 pointWidth
        int32 tmpHeight

        // initialize default values

        if not options.HasKey("x") { options["x"] = 0 }
        if not options.HasKey("width") { options["width"] = svgWidth - options["x"] }

        // determine maximum height

        points = count(dataset["data"])

        max = dataset["data"][0]
        i = 1
        while i < points {
            if dataset["data"][i] > max {
               max = dataset["data"][i]
            }
            i = i + 1
        }

        // configure styling attributes

        pointWidth = (options["width"] - (points - 1) * 5) \ points

        attr = ParseJSON("{}")        
        attr["stroke"] = "#004000"
        attr["stroke-opacity"] = 0.75
        attr["stroke-width"] = 1
        attr["fill"] = "none"

        // create lines

        path = "M"
        i = 0
        while i < points {       
            path = path + Str(options["x"] + pointWidth * i + pointWidth * 0.5 + (5 * i))
            tmpHeight = Round( svgHeight * (dataset["data"][i] / max), 0 )
            path = path + " " + Str(svgHeight - tmpHeight)
            i = i + 1
            if i < points {
                path = path + " "
            }
        }

        attr["d"] = path

        component = BuildElement("path", attr, "")

        return component
    }

    // ***** Scale ********************

    method string Scale(int32 svgWidth, int32 svgHeight, json dataset, json options) {
        string component
        json lineAttr
        json textAttr
        int32 i 
        int32 points
        int32 x
        int32 y        
        int32 step
        string tmpStr
        int32 scaleWidth 

        // initialize default values

        if not options.HasKey("align") { options["align"] = "left" }
        if not options.HasKey("x") { options["x"] = 0 }
        if not options.HasKey("y") { options["y"] = 0 }

        // determine step

        points = count(dataset["data"])


        // TODO: Loop through all items
        tmpStr = Str(dataset["data"][points - 1])
        scaleWidth = Count(tmpStr) * 7

        switch options["align"] {

            case "bottom" {

                step = svgWidth / (points - 1)

                lineAttr = ParseJSON("{}")
                lineAttr["x1"] = 0
                lineAttr["x2"] = svgWidth
                lineAttr["stroke"] = "#000000"
                lineAttr["stroke-width"] = 1
                
                // draw horizontal line

                lineAttr["y1"] = options["y"] + 0
                lineAttr["y2"] = options["y"] + 0
                component = component + BuildElement("line", lineAttr, "")

                // draw scale items

                textAttr = ParseJSON("{}")
                textAttr["fill"] = "#000000"  
                textAttr["y"] = options["y"] + 18
                textAttr["text-anchor"] = "middle"

                lineAttr["y1"] = options["y"] + 0
                lineAttr["y2"] = options["y"] + 5
                
                x = 0
                i = 0
                while i < points {         
                    lineAttr["x1"] = x               
                    lineAttr["x2"] = x
                    component = component + BuildElement("line", lineAttr, "")
                
                    textAttr["x"] = x
                    component = component + BuildElement("text", textAttr, Str(dataset["data"][i]))

                    x = x + step
                    i = i + 1
                }  

            }

            case "left" {

                step = svgHeight / (points - 1)

                lineAttr = ParseJSON("{}")
                lineAttr["y1"] = 0
                lineAttr["y2"] = svgHeight + 1
                lineAttr["stroke"] = "#000000"
                lineAttr["stroke-width"] = 1

                // draw vertical line

                lineAttr["x1"] = options["x"] + scaleWidth + 10
                lineAttr["x2"] = options["x"] + scaleWidth + 10
                component = component + BuildElement("line", lineAttr, "")

                // draw scale items

                textAttr = ParseJSON("{}")
                textAttr["fill"] = "#000000"  
                textAttr["x"] = options["x"] 
                lineAttr["x1"] = options["x"] + scaleWidth + 5
                lineAttr["x2"] = options["x"] + scaleWidth + 10
                y = svgHeight
                i = 0
                while i < points {         
                    lineAttr["y1"] = y               
                    lineAttr["y2"] = y
                    component = component + BuildElement("line", lineAttr, "")
                
                    textAttr["y"] = y
                    component = component + BuildElement("text", textAttr, Str(dataset["data"][i]))

                    y = y - step
                    i = i + 1
                }  

            }

            case "right" {

                step = svgHeight / (points - 1)

                lineAttr = ParseJSON("{}")
                lineAttr["y1"] = 0
                lineAttr["y2"] = svgHeight + 1
                lineAttr["stroke"] = "#000000"
                lineAttr["stroke-width"] = 1

                // draw vertical line

                lineAttr["x1"] = options["x"]
                lineAttr["x2"] = options["x"]

                component = component + BuildElement("line", lineAttr, "")

                // draw scale items

                textAttr = ParseJSON("{}")
                textAttr["fill"] = "#000000"  
                textAttr["x"] = options["x"] + 9
                lineAttr["x1"] = options["x"] 
                lineAttr["x2"] = options["x"] + 5
                y = svgHeight
                i = 0
                while i < points {
                    lineAttr["y1"] = y
                    lineAttr["y2"] = y
                    component = component + BuildElement("line", lineAttr, "")
                
                    textAttr["y"] = y
                    component = component + BuildElement("text", textAttr, Str(dataset["data"][i]))

                    y = y - step
                    i = i + 1
                }  

            }

            case "top" {

                step = svgWidth / (points - 1)

                lineAttr = ParseJSON("{}")
                lineAttr["x1"] = 0
                lineAttr["x2"] = svgWidth
                lineAttr["stroke"] = "#000000"
                lineAttr["stroke-width"] = 1
                
                // draw horizontal line

                lineAttr["y1"] = options["y"] + 19
                lineAttr["y2"] = options["y"] + 19
                component = component + BuildElement("line", lineAttr, "")

                // draw scale items

                textAttr = ParseJSON("{}")
                textAttr["fill"] = "#000000"  
                textAttr["y"] = options["y"] + 12
                textAttr["text-anchor"] = "middle"

                lineAttr["y1"] = options["y"] + 14
                lineAttr["y2"] = options["y"] + 19
                
                x = 0
                i = 0
                while i < points {         
                    lineAttr["x1"] = x               
                    lineAttr["x2"] = x
                    component = component + BuildElement("line", lineAttr, "")
                
                    textAttr["x"] = x
                    component = component + BuildElement("text", textAttr, Str(dataset["data"][i]))

                    x = x + step
                    i = i + 1
                }  

            }

        }

        return component
    }

    // ===========================================================================
    //   HELPER METHODS
    // ===========================================================================

    // ***** BuildElement ********************

    method string BuildElement(string name, json attributes, string content) {
        string element
        int32 i

        element = "<" + name
        i = 0
        while i < Count(attributes) {
            element = element + " " + attributes.KeyName(i) + "=\"" + attributes[attributes.KeyName(i)] + "\""
            i = i + 1
        }
        if content <> "" {
            element = element + ">" + content + "</" + name + ">"
        } else {
            element = element + " />"
        }
       

        return element
    }

    // ***** Render ********************

    method string Render(int32 svgWidth, int32 svgHeight, json object) {
        string composition
        json dataset
        json options
        int32 i
        int32 componentCount
        json component
        int32 datasetIndex

        composition = "<svg "
        composition = composition + " width=\"" + svgWidth + "\""
        composition = composition + " height=\"" + svgHeight + "\""
        composition = composition + " xmlns=\"http://www.w3.org/2000/svg\">"

        componentCount = Count(object["components"])
        i = 0
        while i < componentCount {

            component = object["components"][i]

            // get dataset

            if component.HasKey("dataset") {
                datasetIndex = component["dataset"]
            } else {
                datasetIndex = 0   
            } 
            dataset = object["datasets"][datasetIndex]

            options = ParseJSON("{}")
            if component.HasKey("options") {
                options = component["options"]
            }

            // render component with selected dataset

            switch component["type"] {
                case "candlestickgraph" {                                       
                    composition = composition + CandlestickGraph(svgWidth - 1, svgHeight - 1, object["datasets"], options)
                }                
                case "bargraph" {                                       
                    composition = composition + BarGraph(svgWidth - 1, svgHeight - 1, dataset, options)
                }
                case "heatmap" {                                       
                    composition = composition + HeatMap(svgWidth - 1, svgHeight - 1, dataset, options)
                }                
                case "linegraph" {                                       
                    composition = composition + LineGraph(svgWidth - 1, svgHeight - 1, dataset, options)
                }                
                case "scale" {
                    composition = composition + Scale(svgWidth - 1, svgHeight - 1, dataset, options)
                }
            }

            i = i + 1
        }

        composition = composition + "</svg>"

        return composition 
    }

}