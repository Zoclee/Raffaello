module Rafaello {
    
    // ***** BarChart ********************

    method string BarChart(int32 width, int32 height, json dataSet) {
        string component
        json attr = ParseJSON("{}")
        int32 points
        int32 i 
        int32 max

        points = count(dataSet["data"])

        // determine scale margin

       /* maxScaleLen = 9
        scaleMargin = maxScaleLen * 9

        if position = "right" {
            barsOffset = 0
            yAxisOffset = width - scaleMargin + 5
            scaleOffset = yAxisOffset + 5    
        } else {
            barsOffset = scaleMargin            
            yAxisOffset = barsOffset - 5
            scaleOffset = 0
        }*/

        // determine maximum height

        max = dataSet["data"][0]
        i = 1
        while i < points {
            if dataSet["data"][i] > max {
               max = dataSet["data"][i]
            }
            i = i + 1
        }

        // y-axis

        /*attr = ParseJSON("{}")
        attr["x1"] = yAxisOffset
        attr["y1"] = 0
        attr["x2"] = yAxisOffset
        attr["y2"] = height
        attr["stroke"] = "#000000"
        attr["stroke-width"] = 1
        component = component + BuildElement("line", attr, "")

        // scale values

        attr = ParseJSON("{}")
        attr["x"] = scaleOffset
        attr["y"] = 100
        attr["fill"] = "#000000"    
        component = component + BuildElement("text", attr, "Test12345")*/

        // configure styling attributes

        attr = ParseJSON("{}")
        attr["width"] = (width - (points - 1) * 5) \ points
        attr["fill"] = "#00cc00"
        attr["fill-opacity"] = 0.75
        attr["stroke"] = "#004000"
        attr["stroke-opacity"] = 0.75
        attr["stroke-width"] = 1

        // create bars

        i = 0
        while i < points {
            attr["x"] =  attr["width"] * i + (5 * i)
            attr["height"] = Round( height * (dataSet["data"][i] / max), 0 )
            attr["y"] = height - attr["height"]
            component = component + BuildElement("rect", attr, "")
            i = i + 1
        }

        return component
    }

    // ***** BuildElement ********************

    method string BuildElement(string name, json attributes, string content) {
        string element
        int32 i

        element = "<" + name
        i = 0
        while i < Count(attributes) {
            element = element + " " + attributes.KeyName(i) + "=\"" + attributes[attributes.KeyName(i)] + "\""
            i = i + 1
        }
        if content <> "" {
            element = element + ">" + content + "</" + name + ">"
        } else {
            element = element + " />"
        }
       

        return element
    }

    // ***** Render ********************

    method string Render(int32 width, int32 height, json object) {
        string composition
        json dataSet
        int32 i
        int32 componentCount
        json component

        composition = "<svg "
        composition = composition + " width=\"" + width + "\""
        composition = composition + " height=\"" + height + "\""
        composition = composition + " xmlns=\"http://www.w3.org/2000/svg\">"

        componentCount = Count(object["components"])
        i = 0
        while i < componentCount {
            component = object["components"][i]
            switch component["type"] {
                case "barchart" {
                    dataSet = object["datasets"][component["datasetindex"]]
                    composition = composition + BarChart(width, height, dataSet)
                }
            }

            i = i + 1
        }

        composition = composition + "</svg>"

        return composition 
    }

}